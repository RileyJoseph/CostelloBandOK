'use strict';

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _index = require('../lib/index');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var Assert = require('assert');
var Lab = require('lab');
var Code = require('code');
var lab = exports.lab = Lab.script();
var expect = Code.expect;

lab.experiment('node-rev', function () {
  lab.test('generates a manifest without hashing', function (done) {
    (0, _index2.default)({
      files: 'fixtures/**/*.css', //glob to files you want in the manifest
      outputDir: 'tmp/', //where you want the files to be output that are part of the manifest
      file: 'tmp/assets.json', //optional, allows you to specify location of manifest file and name it, default is root of the project
      hash: false //if you are in dev mode, you can set this to false to just have it create the manifest with the same filenames
    });
    var file = _fs2.default.readFileSync('./tmp/assets.json', 'utf8');
    var manifest = JSON.parse(file);
    expect(manifest['test.css']).to.equal('test.css');
    done();
  });
  lab.test('generates a manifest with hashing', function (done) {
    (0, _index2.default)({
      files: 'fixtures/**/*.css', //glob to files you want in the manifest
      outputDir: 'tmp/', //where you want the files to be output that are part of the manifest
      file: 'tmp/assets.json', //optional, allows you to specify location of manifest file and name it, default is root of the project
      hash: true //if you are in dev mode, you can set this to false to just have it create the manifest with the same filenames
    });
    var file = _fs2.default.readFileSync('./tmp/assets.json', 'utf8');
    var manifest = JSON.parse(file);
    expect(manifest['test.css']).to.startWith('test-');
    done();
  });
  lab.test('takes multiple glob patterns separated by commas', function (done) {
    (0, _index2.default)({
      files: 'fixtures/**/*.css,fixtures/**/*.js', //glob to files you want in the manifest
      outputDir: 'tmp/', //where you want the files to be output that are part of the manifest
      file: 'tmp/assets.json', //optional, allows you to specify location of manifest file and name it, default is root of the project
      hash: true //if you are in dev mode, you can set this to false to just have it create the manifest with the same filenames
    });
    var file = _fs2.default.readFileSync('./tmp/assets.json', 'utf8');
    var manifest = JSON.parse(file);
    expect(manifest['test.css']).to.startWith('test-');
    done();
  });
  lab.test('keeps nested paths even if deeper than one', function (done) {
    (0, _index2.default)({
      files: 'fixtures/**/*.css', //glob to files you want in the manifest
      outputDir: 'tmp/', //where you want the files to be output that are part of the manifest
      file: 'tmp/assets.json', //optional, allows you to specify location of manifest file and name it, default is root of the project
      hash: true //if you are in dev mode, you can set this to false to just have it create the manifest with the same filenames
    });
    var file = _fs2.default.readFileSync('./tmp/assets.json', 'utf8');
    var manifest = JSON.parse(file);
    expect(manifest['first-dir/second-dir/another.css']).to.startWith('first-dir/second-dir/another-');
    expect(_fs2.default.existsSync('./tmp/first-dir/second-dir/another.css')).to.equal(true);
    done();
  });
});
//# sourceMappingURL=node-rev.js.map
//# sourceMappingURL=node-rev.js.map