{"version":3,"sources":["node-rev.js"],"names":["_fs","require","_fs2","_interopRequireDefault","_index","_index2","obj","__esModule","default","Assert","Lab","Code","lab","exports","script","expect","experiment","test","done","files","outputDir","file","hash","readFileSync","manifest","JSON","parse","to","equal","startWith","existsSync"],"mappings":"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","file":"node-rev.js","sourcesContent":["'use strict';\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _index = require('../lib/index');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Assert = require('assert');\nvar Lab = require('lab');\nvar Code = require('code');\nvar lab = exports.lab = Lab.script();\nvar expect = Code.expect;\n\n\nlab.experiment('node-rev', function () {\n  lab.test('generates a manifest without hashing', function (done) {\n    (0, _index2.default)({\n      files: 'fixtures/**/*.css', //glob to files you want in the manifest\n      outputDir: 'tmp/', //where you want the files to be output that are part of the manifest\n      file: 'tmp/assets.json', //optional, allows you to specify location of manifest file and name it, default is root of the project\n      hash: false //if you are in dev mode, you can set this to false to just have it create the manifest with the same filenames\n    });\n    var file = _fs2.default.readFileSync('./tmp/assets.json', 'utf8');\n    var manifest = JSON.parse(file);\n    expect(manifest['test.css']).to.equal('test.css');\n    done();\n  });\n  lab.test('generates a manifest with hashing', function (done) {\n    (0, _index2.default)({\n      files: 'fixtures/**/*.css', //glob to files you want in the manifest\n      outputDir: 'tmp/', //where you want the files to be output that are part of the manifest\n      file: 'tmp/assets.json', //optional, allows you to specify location of manifest file and name it, default is root of the project\n      hash: true //if you are in dev mode, you can set this to false to just have it create the manifest with the same filenames\n    });\n    var file = _fs2.default.readFileSync('./tmp/assets.json', 'utf8');\n    var manifest = JSON.parse(file);\n    expect(manifest['test.css']).to.startWith('test-');\n    done();\n  });\n  lab.test('takes multiple glob patterns separated by commas', function (done) {\n    (0, _index2.default)({\n      files: 'fixtures/**/*.css,fixtures/**/*.js', //glob to files you want in the manifest\n      outputDir: 'tmp/', //where you want the files to be output that are part of the manifest\n      file: 'tmp/assets.json', //optional, allows you to specify location of manifest file and name it, default is root of the project\n      hash: true //if you are in dev mode, you can set this to false to just have it create the manifest with the same filenames\n    });\n    var file = _fs2.default.readFileSync('./tmp/assets.json', 'utf8');\n    var manifest = JSON.parse(file);\n    expect(manifest['test.css']).to.startWith('test-');\n    done();\n  });\n  lab.test('keeps nested paths even if deeper than one', function (done) {\n    (0, _index2.default)({\n      files: 'fixtures/**/*.css', //glob to files you want in the manifest\n      outputDir: 'tmp/', //where you want the files to be output that are part of the manifest\n      file: 'tmp/assets.json', //optional, allows you to specify location of manifest file and name it, default is root of the project\n      hash: true //if you are in dev mode, you can set this to false to just have it create the manifest with the same filenames\n    });\n    var file = _fs2.default.readFileSync('./tmp/assets.json', 'utf8');\n    var manifest = JSON.parse(file);\n    expect(manifest['first-dir/second-dir/another.css']).to.startWith('first-dir/second-dir/another-');\n    expect(_fs2.default.existsSync('./tmp/first-dir/second-dir/another.css')).to.equal(true);\n    done();\n  });\n});\n//# sourceMappingURL=node-rev.js.map"]}